  - at the beginning means im currently workin on it or thinking about it

Text
	Make a dynamic fps/object/draw call counter (like crysis/minecraft)
Lights
	-put into quadtree
	Experiment with the lightloop with entities attaching lights to themselves, not lights attaching to entities
	Experiment with optimizing static lights (no need to lightloop them)
	-Global lights (rendered as FSquad/alltiles no matter what). For sun or whatever.
	shadows

	Lights need to do non-hackey way of getting matricies
	Lights need to have attachments be offsets
	non hackey sphere thing

	- (visible) Lights to use a seperate UBO for all their data. Updated on change/ per frame.
		- Visible meaning any light data i will need for that frame... visible to any viewport that will be rendered
	- Deferred lights can just instance through this UBO
	- Forward rendering can have a per-object list of these lights (calculated per frame as bounding box intersection or whatever), lookup in vert shader or something
	- Tiled rendering might also abuse this

	REDESIGN/REWRITE

Console
	get it rendering text with the renderqueue system
	make it not shitty
World
	Use a queue system to figure out of tree leafs need bbox recalculation?
	Implement dual sorted linked list  in each leaf.
	Implement BBOX smallerizing
	-Disable depth testing to see weather or not my little ordering method helps
		-attempted, not enough of a change to tell
	Basic AABB->AABB collision detection
	Basic SPHERE->AABB collision detection
	Raycast through world, multiple styles

	REDESIGN/REWRITE
Deferred
	fix tiled deferred lighting?
	-finish directional light shading
	PBR support
Entities
	change quadtree check algorithm to add all entities if the entire quadtree bbox checks out, dont bother checking ent bboxes
		maybe
Gamecode
	-Finish Figuring it out
States
	have states track framebuffers, different masks, and do a glclear thing
	-fix that texture bug
	-redo bindbufferrange to correctly handle indexes - kinda done
		make the two things, ubo and vbo, same system
		- i know vbo wont really use the block thing, but you gotta do it right
Tiled Deferred
	fix pixeldepth->viewpos method
	optimize tiled deferred render
		screen quadtree method
		frustums
		Sphere projection method
Models
	Add basic sphere models (of multiple types... icosphere, normalized tesselated cube, etc)
	Be able to generate lower LOD meshes
Animations
	Figure it out
Textures
	Experiment with packing whole texturegroups into one texturearray, or multiple texturegroups into one arraytexture
		most textures in a texturegroup are gonna be same size anyway
		 or experiment with packing texturegroups of the same size into texture arrays
	Add basic procedural texture functions
	Add basic texture manipulation functions (mirror, scale, invert, combine, etc)
Multithread
	Figure it out
	A ways down the road
	push a lot of things to multithreaded
		frustum checking, sorting, etc
Physics
	Bullet physics or something
	Figure it out
Audio
	Openal
	Figure it out
Networking
	Enet
	figure it out
Terrain
	do it shittily
	then add physics
	then do it betterly
	then make editorly
	then make reactive?
	tesselation + offset maps on terrain for extra coolness + overhangs
List stuff
	memsetting on delete may be redundant. possibly remove it
Misc
	-Mass Code cleanup
Renderqueue
	-add many buffers that can be "triggered" for update
		may be part of the VAO manager, add a "trigger" flag and a method for renderqueue to keep track of that
	-add many more UBOs that can be bound an unbound, trigger updates, etc
Model rendering
	-optimize the callback functions slightly
	-optimize depth-only rendering
Debug
	add wireframe/normals/bbox/aabb rendering methods
Shaders
	-have entities handle their shaders/materials better
	-replace crap with layout stuff
	uniform block bindings other than 2... make namable
	make define system a little more robust and less hacky
	REWRITE/REDESIGN
Particles
	do it right
	soft particles
	lit particles
		fake bump map for nice looking shading
Camera
	get it affixed to stuff
	fix weird world coord system
